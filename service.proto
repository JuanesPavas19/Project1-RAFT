syntax = "proto3";

package database;

// Mensajes para leer y escribir datos
message ReadRequest {
  string query = 1;
}

message ReadResponse {
  string result = 1;
}

message WriteRequest {
  string data = 1;
}

message WriteResponse {
  string status = 1;
}

// Mensajes para el Algoritmo Raft
message VoteRequest {
  int32 term = 1;
  string candidate_id = 2;
}

message VoteResponse {
  bool granted = 1;
}

message AppendEntriesRequest {
  string leader_id = 1;
}

message AppendEntriesResponse {
  bool success = 1;
}

// Mensaje para degradar a follower
message DegradeRequest {}

message DegradeResponse {
  string status = 1;
}

// Mensaje para el Ping
message PingRequest {
  string message = 1;
}

message PingResponse {
  string role = 1;
  string state = 2;
  repeated string active_nodes = 3;
}

message UpdateRequest {
  repeated string active_nodes = 1;
}

message UpdateResponse {
  string status = 1;
}

// Mensajes para la sincronización de la base de datos
message LeaderRequest {}  // Solicitud para conocer el líder
message LeaderResponse {
  string leader_id = 1;
}

message DatabaseRequest {}  // Solicitud para obtener la base de datos
message DatabaseResponse {
  string database = 1;
}

// Servicio para la BD y Raft
service DatabaseService {
  rpc ReadData(ReadRequest) returns (ReadResponse);
  rpc WriteData(WriteRequest) returns (WriteResponse);
  rpc RequestVote(VoteRequest) returns (VoteResponse);
  rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);
  rpc Ping(PingRequest) returns (PingResponse);
  rpc UpdateActiveNodes(UpdateRequest) returns (UpdateResponse);
  rpc DegradeToFollower(DegradeRequest) returns (DegradeResponse);
  rpc ReplicateData(WriteRequest) returns (WriteResponse);
  rpc RequestLeader(LeaderRequest) returns (LeaderResponse);
  rpc RequestDatabase(DatabaseRequest) returns (DatabaseResponse);
}
